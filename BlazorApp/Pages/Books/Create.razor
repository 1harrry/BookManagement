@page "/Books/Create"
@using Domain.DTOs
@inject HttpClient Http
@inject NavigationManager Navigation

<EditForm Model="bookData" OnValidSubmit="SaveBook" class="needs-validation">
    <DataAnnotationsValidator />

    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-lg-8 shadow p-4 rounded bg-light">
                <h2 class="mb-4 text-center text-primary">Add/Edit Book</h2>

                <div class="mb-3">
                    <label for="title" class="form-label">Title <span class="text-danger">*</span></label>
                    <InputText id="title" class="form-control" @bind-Value="bookData.Title" />
                    <ValidationMessage For="@(() => bookData.Title)" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="author" class="form-label">Author <span class="text-danger">*</span></label>
                    <InputText id="author" class="form-control" @bind-Value="bookData.Author" />
                    <ValidationMessage For="@(() => bookData.Author)" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="genre" class="form-label">Genre</label>
                    <InputText id="genre" class="form-control" @bind-Value="bookData.Genre" />
                    <ValidationMessage For="@(() => bookData.Genre)" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="publishedYear" class="form-label">Published Year <span class="text-danger">*</span></label>
                    <InputNumber id="publishedYear" class="form-control" @bind-Value="bookData.PublishedYear" />
                    <ValidationMessage For="@(() => bookData.PublishedYear)" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="price" class="form-label">Price</label>
                    <InputNumber id="price" class="form-control" @bind-Value="bookData.Price" />
                    <ValidationMessage For="@(() => bookData.Price)" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="discountPercentage" class="form-label">Discount Percentage</label>
                    <InputNumber id="discountPercentage" class="form-control" @bind-Value="bookData.DiscountPercentage" />
                    <ValidationMessage For="@(() => bookData.DiscountPercentage)" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="rating" class="form-label">Rating</label>
                    <InputNumber id="rating" class="form-control" @bind-Value="bookData.Rating" min="0" max="5" />
                    <ValidationMessage For="@(() => bookData.Rating)" class="text-danger" />
                </div>

                <div class="d-flex justify-content-between">
                    <button class="btn btn-primary" type="submit">
                        <i class="bi bi-check-circle"></i> Save
                    </button>
                    <a class="btn btn-secondary" href="/Books">
                        <i class="bi bi-x-circle"></i> Cancel
                    </a>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    public BookDTO bookData { get; set; } = new();

    protected async Task SaveBook()
    {
        var response = bookData.Id == 0
            ? await Http.PostAsJsonAsync("https://localhost:7242/api/Books", bookData)
            : await Http.PutAsJsonAsync($"https://localhost:7242/api/Books/{bookData.Id}", bookData);

        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/Books");
        }
        else
        {
            var strResponse = await response.Content.ReadAsStringAsync();
            Console.WriteLine("Json Response:\n " + strResponse);
        }
    }
}
